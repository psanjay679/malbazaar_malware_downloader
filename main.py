import requests
import json
import os
from multiprocessing.pool import ThreadPool as Pool
global sign_hash_list
global hash_pool


url = 'https://mb-api.abuse.ch/api/v1/'


def get_signature_info(signature_name='trickBot', limit=10):

    post_data = {
        'query': 'get_taginfo',
        'tag': signature_name,
        'limit': limit
    }

    result = requests.post(url, data=post_data)
    return json.loads(result.text)


def get_hashes_from_signature(signature_name='trickBot', limit=10):

    global sign_hash_list
    print(f'getting info for: {signature_name}')

    signature_info = get_signature_info(signature_name=signature_name, limit=limit)

    result = list()

    if signature_info['query_status'] == 'ok':
        result = [(x.get('sha1_hash'), x.get('file_name')) for x in signature_info['data']]

    download_pool = Pool(len(result))

    for file_hash, file_name in result:
        download_pool.apply_async(download_malware_sample, (file_hash, file_name, signature_name,))

    download_pool.close()
    download_pool.join()

    sign_hash_list.append({f'{signature_name}': result})


def download_malware_sample(file_hash, file_name, signature_name):

    print(f'download for signature: {signature_name} with filename: {file_name} starting...\n')

    download_dir = os.path.join(os.getcwd(), f'{signature_name}')

    if not os.path.exists(download_dir):
        os.mkdir(download_dir)

    post_data = {
        'query': 'get_file',
        'sha256_hash': file_hash
    }

    result = requests.post(url, data=post_data)

    with open(os.path.join(download_dir, f'{file_name}.zip'), 'wb') as f:
        f.write(result.content)

    print(f'download for signature: {signature_name} with filename: {file_name} is completed.\n')


if __name__ == '__main__':

    global sign_hash_list
    signatures = ['trickBot', 'dridex', 'quakbot']
    # signatures = ['trickBot']

    pool = Pool(len(signatures))
    sign_hash_list = list()

    for signature in signatures:
        pool.apply_async(get_hashes_from_signature, (signature.lower(), 10))
        # get_hashes_from_signature(signature.lower(), 10)

    pool.close()
    pool.join()
